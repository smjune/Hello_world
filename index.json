[{"content":"GitLab 으로 Deploy 하기 github 에 deploy 했던 hugo project 을 git remote 만 추가하서 gitlab repo 에 push 하고,\ngitlab CI/CD 을 이용하여 build, deploy 하는 방법\ngitlab 의 경우 Account.gitlab.io/YOUR_REPO 형태만 존재\nGitlab repo 만들기 Git Remote 에 gitlab 추가 Gitlab CI/CD 구성 ","permalink":"https://smjune.github.io/Hello_world/posts/gitlab/","summary":"GitLab 으로 Deploy 하기 github 에 deploy 했던 hugo project 을 git remote 만 추가하서 gitlab repo 에 push 하고,\ngitlab CI/CD 을 이용하여 build, deploy 하는 방법\ngitlab 의 경우 Account.gitlab.io/YOUR_REPO 형태만 존재\nGitlab repo 만들기 Git Remote 에 gitlab 추가 Gitlab CI/CD 구성 ","title":"Gitlab"},{"content":"github 에서 블로그 만들기 hugo 로컬 빌드를 해서 public 을 submodule 으로 다른 repo 에 push 하는 방식 대신 github action 을 이용하여 1개 repo에서 main 을 빌드 후 gh-pages 브랜치로 deploy 하는 방식 사용\nProject Settings | Pages | Build and Deploy | branches : gh-pages 설정 로컬에서는 \u0026lsquo;hugo server\u0026rsquo; 을 이용하여 확인 후 push 함 해당 github pages 을 만든 이력정리 (아래 관련 지식 보유 가정)\n* 기본 적인 SSG (Static Site Generator) 관련 정보 * brew, git, github, hugo 설치 및 사용 방법 (Hugo 는 windows 지원) Hugo (SSG) https://gohugo.io/documentation/\n$ hugo new site [hugo project name] 으로 프로젝트 생성. config.toml : BaseURL, title 과 Theme 을 수정. themes : 사용할 Web theme 을 설치. ( git submodule 사용 ) content : 폴더/파일.md 형태로 글 작성 및 구성. ( $ hugo new posts/hello.md ) hugo server 으로 로컬 호스트 페이지 확인 ( md 파일에 draft : true 인 경우 -D 옵션 필요) hugo server 가 실행 중이면, 수정 내용을 저장하면 바로 로컬 호스트 페이지에 반영됨 github pages 만들기 https://docs.github.com/en/pages/ github pages 종류 1. 개인 github Pages 2. 프로젝트 github Pages 1. 개인 Page (Blog) : UserAccont.github.io Base URL : https://UserAccount.github.io/\nRepo 주소 : https://github.com/UserAccount/UserAccount.github.io.git\n해당 repo 는 pages 을 위한 repo 이므로 hugo project = git project 으로 생성한다. $ hugo new site hugo_project $ cd hugo_project $ git init $ git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke $ echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; config.toml // edit BaseURL and title $ hugo new posts/sample.md // edit sample.md $ hugo server // Be sure it works. if not, correct it $ git remote add origin https://github.com/UserAccount/UserAccount.github.io.git $ git add . $ git commit -m \u0026#39;initiate project\u0026#39; $ git push origin master // browse https://UserAccount.github.io/ 폴더 구조\nhugo project 을 git (github) 로 관리한다고 생각하면 된다.\nproject root 에서 hugo 와 git 명령어를 사용할 수 있다.\nproject folder (git, hugo) ├─.git ├─.gitmodules ├─.github │ └─workflows │ └─gh-pages.yml ├─congif.toml ├─themes │ └─themes folder (submodule) ├─content │ ├─posts │ │ ├─main.md │ │ └─... │ └─... ├─... └─readme.md 2. 프로젝트 Page (Blog) UserAccont.github.io/Project Base URL : https://UserAccount.github.io/Project\nRepo 주소 : https://github.com/UserAcount/Project.git\n해당 repo 는 git 프로젝트 안에 source code 와 hugo 을 포함한다. // 기존 git project 에서 $ hugo new site hugo $ cd hugo_project $ git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke $ echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; config.toml // edit BaseURL and title $ hugo new posts/sample.md // edit sample.md $ hugo server // Be sure it works. if not, correct it $ cd .. $ git add . $ git commit -m \u0026#39;initiate project\u0026#39; $ git push origin master // browse https://UserAccount.github.io/Project 폴더 구조\n프로젝트의 main branch 기본구조는 아래와 같이 구성된다.\n프로젝트는 source code folder와 hugo 폴더를 갖는다.\n따라서 git 명령어는 project root 에서, hugo 명령어는 hugo 폴더로 이동후 사용한다.\npages 을 deploy 하는 github action 은 .github/workflows/gh-pages.yml 이다.\nhugo folder 는 \u0026rsquo; $ hugo new site hugo \u0026rsquo; 로 생성한다.\ntheme 는 \u0026rsquo; $ git submodule add [submoduel.git] themes/[theme name] \u0026rsquo;\n각 page 는 \u0026rsquo; $ hugo new xxx/xxx.md \u0026rsquo; 로 생성한다.\n프로젝트 gh-pages 브랜치는 hugo 가 빌드된 Web Site (html) 만 존재한다.\nproject folder (git) ├─.git ├─.gitmodules ├─.github │ └─workflows │ └─gh-pages.yml ├─Source Code folder │ ├─lib │ │ ├─utillib.lib │ │ └─... │ ├─build │ │ ├─.buildscript │ │ └─... │ ├─main.cpp │ └─... ├─hugo project folder (hugo) │ ├─congif.toml │ ├─themes │ │ └─themes folder (submodule) │ ├─content │ │ ├─posts │ │ │ ├─main.md │ │ │ └─... │ │ └─... │ └─... ├─... └─readme.md branch 으로 구분하는 방법도 생각해 보았으나, (main, hugo, gh-pages)\n- main branch : soure code 파일 만 존재\n- hugo branch : hugo project 파일만 존재\n- gh-pasges branch : hugo build 결과 (html) 파일만 존재\n동일한 수정에 대한 commit 을 main 브랜치 (source code 수정) 와\nhugo 브랜치 (page 수정 ) 에 각각 1번씩 총 2번을 수행해야 하므로 보류\n3. GitHub Actions to build and deploy the hugo project .github/workflows/gh-pages.yml 생성 https://github.com/peaceiris/actions-gh-pages\n여기서 주의 할 점 project page 인 경우\n\u0026gt; hugo 프로젝트 가 하위로 설정 되어 있으므로\n... - name: Build run: | cd hugo_project // hugo 프로젝트로 이동 hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v. if: ${{ github.ref == 'refs/heads/main' }} // branch 확인 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./hugu_project/public // hugo project 하위 public 폴더 사용 ... ","permalink":"https://smjune.github.io/Hello_world/posts/hello/","summary":"github 에서 블로그 만들기 hugo 로컬 빌드를 해서 public 을 submodule 으로 다른 repo 에 push 하는 방식 대신 github action 을 이용하여 1개 repo에서 main 을 빌드 후 gh-pages 브랜치로 deploy 하는 방식 사용\nProject Settings | Pages | Build and Deploy | branches : gh-pages 설정 로컬에서는 \u0026lsquo;hugo server\u0026rsquo; 을 이용하여 확인 후 push 함 해당 github pages 을 만든 이력정리 (아래 관련 지식 보유 가정)\n* 기본 적인 SSG (Static Site Generator) 관련 정보 * brew, git, github, hugo 설치 및 사용 방법 (Hugo 는 windows 지원) Hugo (SSG) https://gohugo.","title":"Hello"}]